user  nobody;
worker_processes  1;
daemon off;

env npm_config_registry;

events {
    worker_connections  1024;
}

http {
    # We literally only care about 2 types of files/payloads.
    types {
        application/json                      json;
        application/gzip                      tgz;
    }
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    proxy_cache_path  /tmp/npm/cache levels=1:2 keys_zone=NPM:10m inactive=90d max_size=5g;
    proxy_temp_path   /tmp/npm/temp;
    proxy_cache_lock  on;
    log_format upstreamlog '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" "$ephemeralCacheStatus"';
    access_log logs/access.log upstreamlog;

    lua_shared_dict npmConfig 32k;
    lua_shared_dict npmMeta 128M;

    init_by_lua_block {
        local ephemeralNPM = require "ephemeral-npm"
        ephemeralNPM.init()
    }

    server {
        listen       4873;
        set $npm_config_registry '';
        set_by_lua_block $npm_config_registry {
            return ngx.shared.npmConfig:get('npm_config_registry')
        }
        location ~ ^/.*\.tgz$ {
            root               /tmp/npm/store;
            try_files          $uri @fetch-tgz;
        }
        location / {
            set $ephemeralCacheStatus '-';
            # We can't do caching at the proxy level because we can't easily
            # parameterize cache lifetime for proxy_cache. Instead, we do
            # the caching ourselves in Lua using a shared dict.
            content_by_lua_block {
                local ephemeralNPM = require "ephemeral-npm"
                ephemeralNPM.getPackage()
            }
        }
        # This is just a straight though, uncaching proxy to the upstream
        # registry.
        # We have to use a path prefix instead of an internal @name because
        # we need to be able to make sub-requests using ngx.location.capture()
        location /-@- {
            internal;
            rewrite                /-@-/(.+) /$1 break;
            resolver               127.0.0.1 ipv6=off;
            proxy_pass             $npm_config_registry;
            proxy_buffers          32 1m;
            # need to disable encoding in order to be able to process it locally
            proxy_set_header       Accept-Encoding "";
            # modifying the response body will change the length
            header_filter_by_lua_block {
                ngx.header.content_length = nil
            }
            body_filter_by_lua_block {
                local ephemeralNPM = require "ephemeral-npm"
                ephemeralNPM.filterPackageBody()
            }
        }
        location @fetch-tgz {
            internal;
            resolver           127.0.0.1 ipv6=off;
            proxy_pass         $npm_config_registry;
            proxy_buffering    on;
            proxy_buffers      512 512k;
            proxy_store        on;
            proxy_store_access user:rw group:rw all:r;
            proxy_temp_path    /tmp/npm/temp;
            root               /tmp/npm/store;
        }
    }
}
