user  nobody;
worker_processes  1;
daemon off;

env npm_config_registry;

events {
    worker_connections  1024;
}


http {
    # We literally only care about 2 types of files/payloads.
    types {
        application/json                      json;
        application/gzip                      tgz;
    }
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    proxy_cache_path  /tmp/npm/cache levels=1:2 keys_zone=NPM:10m inactive=90d max_size=5g;
    proxy_temp_path   /tmp/npm/temp;
    proxy_cache_lock  on;
    log_format upstreamlog '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" "$upstream_cache_status"';
    access_log logs/access.log upstreamlog;

    lua_shared_dict npmConfig 32k;
    init_by_lua_block {
        local npmConfig = ngx.shared.npmConfig
        local registry = os.getenv("npm_config_registry"):gsub("/+$", "")
        local pattern = registry:gsub("%.", "%%."):gsub("%-", "%%-")
        -- escape . and - which have special meaning in Lua patterns
        npmConfig:set('npm_config_registry', registry)
        npmConfig:set('npm_upstream_pattern', pattern)
        -- ngx.log(ngx.ERR, 'using upstream base: ', registry)
        -- ngx.log(ngx.ERR, 'using upstream pattern: ', pattern)
    }

    server {
        listen       4873;
        set $npm_config_registry '';
        set_by_lua_block $npm_config_registry {
            return ngx.shared.npmConfig:get('npm_config_registry')
        }
        location ~ ^/.*\.tgz$ {
            root               /tmp/npm/store;
            try_files          $uri @fetch-tgz;
        }
        location / {
            resolver               127.0.0.1 ipv6=off;
            proxy_pass             $npm_config_registry;
            proxy_buffers          32 1m;
            proxy_cache            NPM;
            # need nginx-1.11.10 for this, which isn't in openresty yet:
            # proxy_cache_background_update on;
            proxy_cache_revalidate on;
            # let our metadata be 20 minutes old, at most
            proxy_cache_valid      200  20m;
            proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
            # need to disable encoding in order to be able to filter the response body
            proxy_set_header       Accept-Encoding "";
            # modifying the response body will change the length
            header_filter_by_lua_block {
                ngx.header.content_length = nil
            }
            # replace all occurances of, eg. https://registry.npmjs.org with http://127.0.0.1:4873
            body_filter_by_lua_block {
                local npmConfig = ngx.shared.npmConfig
                local upstream = npmConfig:get('npm_upstream_pattern')
                -- need to construct URL because we may be proxying http<->https
                local base = ngx.var.scheme .. '://' .. ngx.var.http_host
                -- ngx.log(ngx.ERR, "Modifying JSON of " .. ngx.var.uri .. " to replace '" .. upstream .. "' with '" .. base .. "'")
                ngx.arg[1] = string.gsub(ngx.arg[1], upstream, base)
            }
        }
        location @fetch-tgz {
            internal;
            resolver           127.0.0.1 ipv6=off;
            proxy_pass         $npm_config_registry;
            proxy_store        on;
            proxy_store_access user:rw group:rw all:r;
            proxy_temp_path    /tmp/npm/temp;
            root               /tmp/npm/store;
        }
    }
}
